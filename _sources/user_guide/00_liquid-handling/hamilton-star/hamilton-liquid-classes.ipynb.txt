{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "302c3f6d",
   "metadata": {},
   "source": [
    "# Using \"Hamilton Liquid Classes\" with Pylabrobot\n",
    "\n",
    "This notebook demonstrates how to use the Hamilton liquid classes with Pylabrobot's liquid handling system. \"Liquid classes\" are essentially a essentially sets of predefined parameters that describe a specific liquid transfer operation (aspirate + dispense). While it is possible to control all parameters explicitly/manually, or to store those in dictionaries of kwargs, using \"Hamilton liquid classes\" is the historical way many people are used to doing this in Venus. \"Hamilton liquid class\" refers to the concept of the 'set of parameters' as it is used in VENUS.\n",
    "\n",
    "PyLabRobot has imported many Hamilton liquid classes from VENUS. In this notebook we will show how to use these classes in PylabRobot."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "244c67c9",
   "metadata": {},
   "source": [
    "## Simple example setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e4a91d71",
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "314c913e",
   "metadata": {},
   "source": [
    "Use the `STARChatterboxBackend` to test out the liquid classes without connecting to a real Hamilton STAR robot. Switch out the backend to `STARBackend` to run on a real robot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8a28fa0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pylabrobot.liquid_handling import LiquidHandler\n",
    "from pylabrobot.liquid_handling.backends.hamilton.STAR_chatterbox import STARChatterboxBackend\n",
    "# from pylabrobot.liquid_handling.backends.hamilton.STAR_backend import STARBackend\n",
    "\n",
    "from pylabrobot.resources.hamilton import STARLetDeck\n",
    "\n",
    "backend = STARChatterboxBackend()\n",
    "# backend = STARBackend()\n",
    "lh = LiquidHandler(backend=backend, deck=STARLetDeck())\n",
    "\n",
    "await lh.setup()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "91b6df80",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pylabrobot.resources import (\n",
    "  TIP_CAR_480_A00,\n",
    "  PLT_CAR_L5AC_A00,\n",
    "  Cor_96_wellplate_360ul_Fb,\n",
    "  hamilton_96_tiprack_1000uL_filter,\n",
    ")\n",
    "\n",
    "tip_car = TIP_CAR_480_A00(name=\"tip carrier\")\n",
    "tip_car[0] = tr = hamilton_96_tiprack_1000uL_filter(name=\"tips_01\")\n",
    "lh.deck.assign_child_resource(tip_car, rails=3)\n",
    "\n",
    "plt_car = PLT_CAR_L5AC_A00(name=\"plate carrier\")\n",
    "plt_car[0] = plate = Cor_96_wellplate_360ul_Fb(name=\"plate_01\")\n",
    "lh.deck.assign_child_resource(plt_car, rails=15)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "034980b1",
   "metadata": {},
   "source": [
    "### Picking up tips for the rest of the notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d8dda5e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C0TTid0001tt01tf1tl0871tv10650tg3tu0\n",
      "C0TPid0002xp01629 01629 01629 00000&yp1458 1368 1278 0000&tm1 1 1 0&tt01tp2266tz2166th2450td0\n"
     ]
    }
   ],
   "source": [
    "await lh.pick_up_tips(tr[\"A1:C1\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33988b4c",
   "metadata": {},
   "source": [
    "## Using a predefined Hamilton liquid class"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e4a3d55",
   "metadata": {},
   "source": [
    "Pass a predefined Hamilton liquid class to the `lh.aspirate` method using the `hamilton_liquid_classes` parameter. This parameter is a backend kwarg defined by the STARBackend. This will use the parameters defined in the liquid class for the aspirate operation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4cc2e7d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C0ASid0003at0 0 0 0&tm1 1 1 0&xp04333 04333 04333 00000&yp1457 1367 1277 0000&th2450te2450lp2000 2000 2000 2000&ch000 000 000 000&zl1866 1866 1866 1866&po0100 0100 0100 0100&zu0032 0032 0032 0032&zr06180 06180 06180 06180&zx1866 1866 1866 1866&ip0000 0000 0000 0000&it0 0 0 0&fp0000 0000 0000 0000&av01083 00563 02110 01083&as2500 2500 2500 2500&ta000 000 000 000&ba0000 0000 0000 0000&oa000 000 000 000&lm0 0 0 0&ll1 1 1 1&lv1 1 1 1&zo000 000 000 000&ld00 00 00 00&de0020 0020 0020 0020&wt10 10 10 10&mv00000 00000 00000 00000&mc00 00 00 00&mp000 000 000 000&ms1200 1200 1200 1200&mh0000 0000 0000 0000&gi000 000 000 000&gj0gk0lk0 0 0 0&ik0000 0000 0000 0000&sd0500 0500 0500 0500&se0500 0500 0500 0500&sz0300 0300 0300 0300&io0000 0000 0000 0000&il00000 00000 00000 00000&in0000 0000 0000 0000&\n"
     ]
    }
   ],
   "source": [
    "from pylabrobot.liquid_handling.liquid_classes.hamilton.star import HighVolumeFilter_Water_DispenseSurface_Part\n",
    "await lh.aspirate(\n",
    "  plate[\"A1:C1\"],\n",
    "  vols=[100.0, 50.0, 200.0],\n",
    "  hamilton_liquid_classes=[HighVolumeFilter_Water_DispenseSurface_Part]*3,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e83d3f2d",
   "metadata": {},
   "source": [
    "## Using a different Hamilton liquid class for each channel"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07993140",
   "metadata": {},
   "source": [
    "You can easily pass a list of different Hamilton liquid classes. They will correspond to the channels in the order they are specified."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "099e7ad1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C0ASid0004at0 0 0 0&tm1 1 1 0&xp04333 04333 04333 00000&yp1457 1367 1277 0000&th2450te2450lp2000 2000 2000 2000&ch000 000 000 000&zl1866 1866 1866 1866&po0100 0100 0100 0100&zu0032 0032 0032 0032&zr06180 06180 06180 06180&zx1866 1866 1866 1866&ip0000 0000 0000 0000&it0 0 0 0&fp0000 0000 0000 0000&av01083 00629 02000 01083&as2500 2500 2500 2500&ta000 050 000 000&ba0000 0000 0500 0000&oa000 000 000 000&lm0 0 0 0&ll1 1 1 1&lv1 1 1 1&zo000 000 000 000&ld00 00 00 00&de0020 0020 0020 0020&wt10 10 10 10&mv00000 00000 00000 00000&mc00 00 00 00&mp000 000 000 000&ms1200 2500 2500 1200&mh0000 0000 0000 0000&gi000 000 000 000&gj0gk0lk0 0 0 0&ik0000 0000 0000 0000&sd0500 0500 0500 0500&se0500 0500 0500 0500&sz0300 0300 0300 0300&io0000 0000 0000 0000&il00000 00000 00000 00000&in0000 0000 0000 0000&\n"
     ]
    }
   ],
   "source": [
    "from pylabrobot.liquid_handling.liquid_classes.hamilton.star import HighVolumeFilter_Water_DispenseSurface_Part, HighVolumeFilter_EtOH_DispenseJet, HighVolumeFilter_DMSO_AliquotDispenseJet_Part\n",
    "\n",
    "await lh.aspirate(\n",
    "  plate[\"A1:C1\"],\n",
    "  vols=[100.0, 50.0, 200.0],\n",
    "  hamilton_liquid_classes=[\n",
    "    HighVolumeFilter_Water_DispenseSurface_Part,\n",
    "    HighVolumeFilter_EtOH_DispenseJet,\n",
    "    HighVolumeFilter_DMSO_AliquotDispenseJet_Part,\n",
    "  ], \n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b640c6b",
   "metadata": {},
   "source": [
    "## Using custom Hamilton liquid classes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69e68119",
   "metadata": {},
   "source": [
    "It is also possible to define your own Hamilton liquid classes. This is useful if you want to use a specific set of parameters that are not available in the predefined classes.\n",
    "\n",
    "The example below is based on the `HighVolumeFilter_Water_DispenseSurface_Part`, but you can easily modify the parameters to suit your needs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d237bda2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C0ASid0005at0 0 0 0&tm1 1 1 0&xp04333 04333 04333 00000&yp1457 1367 1277 0000&th2450te2450lp2000 2000 2000 2000&ch000 000 000 000&zl1866 1866 1866 1866&po0100 0100 0100 0100&zu0032 0032 0032 0032&zr06180 06180 06180 06180&zx1866 1866 1866 1866&ip0000 0000 0000 0000&it0 0 0 0&fp0000 0000 0000 0000&av01083 00563 02110 01083&as2500 2500 2500 2500&ta000 000 000 000&ba0000 0000 0000 0000&oa000 000 000 000&lm0 0 0 0&ll1 1 1 1&lv1 1 1 1&zo000 000 000 000&ld00 00 00 00&de0020 0020 0020 0020&wt10 10 10 10&mv00000 00000 00000 00000&mc00 00 00 00&mp000 000 000 000&ms1200 1200 1200 1200&mh0000 0000 0000 0000&gi000 000 000 000&gj0gk0lk0 0 0 0&ik0000 0000 0000 0000&sd0500 0500 0500 0500&se0500 0500 0500 0500&sz0300 0300 0300 0300&io0000 0000 0000 0000&il00000 00000 00000 00000&in0000 0000 0000 0000&\n"
     ]
    }
   ],
   "source": [
    "from pylabrobot.liquid_handling.liquid_classes.hamilton import HamiltonLiquidClass\n",
    "\n",
    "my_custom_hamilton_liquid_class = HamiltonLiquidClass(\n",
    "  curve={\n",
    "    500.0: 518.3,\n",
    "    50.0: 56.3,\n",
    "    0.0: 0.0,\n",
    "    100.0: 108.3,\n",
    "    20.0: 23.9,\n",
    "    1000.0: 1028.5,\n",
    "    200.0: 211.0,\n",
    "    10.0: 12.7,\n",
    "  },\n",
    "  aspiration_flow_rate=250.0,\n",
    "  aspiration_mix_flow_rate=120.0,\n",
    "  aspiration_air_transport_volume=0.0,\n",
    "  aspiration_blow_out_volume=0.0,\n",
    "  aspiration_swap_speed=2.0,\n",
    "  aspiration_settling_time=1.0,\n",
    "  aspiration_over_aspirate_volume=5.0,\n",
    "  aspiration_clot_retract_height=0.0,\n",
    "  dispense_flow_rate=120.0,\n",
    "  dispense_mode=4.0,\n",
    "  dispense_mix_flow_rate=1.0,\n",
    "  dispense_air_transport_volume=30.0,\n",
    "  dispense_blow_out_volume=0.0,\n",
    "  dispense_swap_speed=2.0,\n",
    "  dispense_settling_time=1.0,\n",
    "  dispense_stop_flow_rate=5.0,\n",
    "  dispense_stop_back_volume=0.0,\n",
    ")\n",
    "\n",
    "await lh.aspirate(\n",
    "  plate[\"A1:C1\"],\n",
    "  vols=[100.0, 50.0, 200.0],\n",
    "  hamilton_liquid_classes=[my_custom_hamilton_liquid_class]*3, \n",
    ")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "env (3.10.15)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
